<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__player_stats_8cpp_source" xml:lang="en-US">
<title>PlayerStats.cpp</title>
<programlisting linenumbering="unnumbered"><anchor xml:id="__player_stats_8cpp_source_1l00001"/>00001 <emphasis role="comment">/*&#32;</emphasis>
<anchor xml:id="__player_stats_8cpp_source_1l00002"/>00002 <emphasis role="comment">&#32;*&#32;File:&#32;PlayerStats.cpp</emphasis>
<anchor xml:id="__player_stats_8cpp_source_1l00003"/>00003 <emphasis role="comment">&#32;*&#32;Author:&#32;Ireoluwa&#32;Dairo</emphasis>
<anchor xml:id="__player_stats_8cpp_source_1l00004"/>00004 <emphasis role="comment">&#32;*&#32;Created&#32;on&#32;November&#32;27,&#32;2024</emphasis>
<anchor xml:id="__player_stats_8cpp_source_1l00005"/>00005 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="__player_stats_8cpp_source_1l00006"/>00006 
<anchor xml:id="__player_stats_8cpp_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&quot;PlayerStats.h&quot;</emphasis>
<anchor xml:id="__player_stats_8cpp_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
<anchor xml:id="__player_stats_8cpp_source_1l00009"/>00009 
<anchor xml:id="__player_stats_8cpp_source_1l00010"/>00010 <emphasis role="keywordtype">int</emphasis>&#32;PStats::num&#32;=&#32;0;
<anchor xml:id="__player_stats_8cpp_source_1l00011"/>00011 
<anchor xml:id="__player_stats_8cpp_source_1l00012"/>00012 PStats::PStats(<emphasis role="keywordtype">int</emphasis>&#32;maxSz)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_game_res">GameRes</link>[maxSz];
<anchor xml:id="__player_stats_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max&#32;=&#32;maxSz;
<anchor xml:id="__player_stats_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;0;
<anchor xml:id="__player_stats_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rate&#32;=&#32;0;
<anchor xml:id="__player_stats_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;games&#32;=&#32;0;
<anchor xml:id="__player_stats_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wins&#32;=&#32;0;
<anchor xml:id="__player_stats_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num++;
<anchor xml:id="__player_stats_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(bad_alloc&amp;&#32;ba)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;runtime_error(<emphasis role="stringliteral">&quot;Memory&#32;fail&quot;</emphasis>);
<anchor xml:id="__player_stats_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;}
<anchor xml:id="__player_stats_8cpp_source_1l00024"/>00024 }
<anchor xml:id="__player_stats_8cpp_source_1l00025"/>00025 
<anchor xml:id="__player_stats_8cpp_source_1l00026"/>00026 PStats::PStats(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_p_stats">PStats</link>&amp;&#32;old)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_game_res">GameRes</link>[old.max];
<anchor xml:id="__player_stats_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max&#32;=&#32;old.max;
<anchor xml:id="__player_stats_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;old.size;
<anchor xml:id="__player_stats_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rate&#32;=&#32;old.rate;
<anchor xml:id="__player_stats_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;games&#32;=&#32;old.games;
<anchor xml:id="__player_stats_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wins&#32;=&#32;old.wins;
<anchor xml:id="__player_stats_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__player_stats_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size;&#32;i++)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res[i]&#32;=&#32;old.res[i];
<anchor xml:id="__player_stats_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__player_stats_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num++;
<anchor xml:id="__player_stats_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(bad_alloc&amp;&#32;ba)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;runtime_error(<emphasis role="stringliteral">&quot;Copy&#32;fail&quot;</emphasis>);
<anchor xml:id="__player_stats_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;}
<anchor xml:id="__player_stats_8cpp_source_1l00042"/>00042 }
<anchor xml:id="__player_stats_8cpp_source_1l00043"/>00043 
<anchor xml:id="__player_stats_8cpp_source_1l00044"/>00044 PStats::~PStats()&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;res;
<anchor xml:id="__player_stats_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;num--;
<anchor xml:id="__player_stats_8cpp_source_1l00047"/>00047 }
<anchor xml:id="__player_stats_8cpp_source_1l00048"/>00048 
<anchor xml:id="__player_stats_8cpp_source_1l00049"/>00049 <link linkend="_class_p_stats">PStats</link>&amp;&#32;PStats::operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_p_stats">PStats</link>&amp;&#32;rhs)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;rhs)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;res;
<anchor xml:id="__player_stats_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_game_res">GameRes</link>[rhs.max];
<anchor xml:id="__player_stats_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max&#32;=&#32;rhs.max;
<anchor xml:id="__player_stats_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;rhs.size;
<anchor xml:id="__player_stats_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rate&#32;=&#32;rhs.rate;
<anchor xml:id="__player_stats_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;games&#32;=&#32;rhs.games;
<anchor xml:id="__player_stats_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wins&#32;=&#32;rhs.wins;
<anchor xml:id="__player_stats_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__player_stats_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size;&#32;i++)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res[i]&#32;=&#32;rhs.res[i];
<anchor xml:id="__player_stats_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__player_stats_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(bad_alloc&amp;&#32;ba)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;runtime_error(<emphasis role="stringliteral">&quot;Set&#32;fail&quot;</emphasis>);
<anchor xml:id="__player_stats_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__player_stats_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;}
<anchor xml:id="__player_stats_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
<anchor xml:id="__player_stats_8cpp_source_1l00068"/>00068 }
<anchor xml:id="__player_stats_8cpp_source_1l00069"/>00069 
<anchor xml:id="__player_stats_8cpp_source_1l00070"/>00070 <emphasis role="keywordtype">void</emphasis>&#32;PStats::setAll(<emphasis role="keywordtype">int</emphasis>&#32;gms,&#32;<emphasis role="keywordtype">int</emphasis>&#32;wns)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;games&#32;=&#32;gms;
<anchor xml:id="__player_stats_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;wins&#32;=&#32;wns;
<anchor xml:id="__player_stats_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(games&#32;&gt;&#32;0)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rate&#32;=&#32;(wins&#32;*&#32;100)&#32;/&#32;games;
<anchor xml:id="__player_stats_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rate&#32;=&#32;0;
<anchor xml:id="__player_stats_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;}
<anchor xml:id="__player_stats_8cpp_source_1l00078"/>00078 }
<anchor xml:id="__player_stats_8cpp_source_1l00079"/>00079 
<anchor xml:id="__player_stats_8cpp_source_1l00080"/>00080 <link linkend="_struct_stats">Stats</link>&#32;PStats::getAll()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="__player_stats_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{games,&#32;wins};
<anchor xml:id="__player_stats_8cpp_source_1l00082"/>00082 }
<anchor xml:id="__player_stats_8cpp_source_1l00083"/>00083 
<anchor xml:id="__player_stats_8cpp_source_1l00084"/>00084 <emphasis role="keywordtype">void</emphasis>&#32;PStats::add(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_game_res">GameRes</link>&amp;&#32;newRes)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(size&#32;&gt;=&#32;max)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;runtime_error(<emphasis role="stringliteral">&quot;Stats&#32;full&quot;</emphasis>);
<anchor xml:id="__player_stats_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;}
<anchor xml:id="__player_stats_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;
<anchor xml:id="__player_stats_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;res[size++]&#32;=&#32;newRes;
<anchor xml:id="__player_stats_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;games++;
<anchor xml:id="__player_stats_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(newRes.isWin())&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wins++;
<anchor xml:id="__player_stats_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;}
<anchor xml:id="__player_stats_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;
<anchor xml:id="__player_stats_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(games&#32;&gt;&#32;0)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rate&#32;=&#32;(wins&#32;*&#32;100)&#32;/&#32;games;
<anchor xml:id="__player_stats_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;}
<anchor xml:id="__player_stats_8cpp_source_1l00098"/>00098 }
<anchor xml:id="__player_stats_8cpp_source_1l00099"/>00099 
<anchor xml:id="__player_stats_8cpp_source_1l00100"/>00100 <emphasis role="keywordtype">int</emphasis>&#32;PStats::getRate()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="__player_stats_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rate;
<anchor xml:id="__player_stats_8cpp_source_1l00102"/>00102 }
<anchor xml:id="__player_stats_8cpp_source_1l00103"/>00103 
<anchor xml:id="__player_stats_8cpp_source_1l00104"/>00104 <emphasis role="keywordtype">bool</emphasis>&#32;PStats::operator&lt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_p_stats">PStats</link>&amp;&#32;rhs)<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="__player_stats_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rate&#32;&lt;&#32;rhs.rate;
<anchor xml:id="__player_stats_8cpp_source_1l00106"/>00106 }
<anchor xml:id="__player_stats_8cpp_source_1l00107"/>00107 
<anchor xml:id="__player_stats_8cpp_source_1l00108"/>00108 <link linkend="_class_p_stats">PStats</link>&#32;PStats::operator+(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_p_stats">PStats</link>&amp;&#32;rhs)<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="__player_stats_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<link linkend="_class_p_stats">PStats</link>&#32;tmp(max&#32;+&#32;rhs.max);
<anchor xml:id="__player_stats_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;tmp.size&#32;=&#32;0;
<anchor xml:id="__player_stats_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;tmp.rate&#32;=&#32;(rate&#32;+&#32;rhs.rate)&#32;/&#32;2;
<anchor xml:id="__player_stats_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;
<anchor xml:id="__player_stats_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size;&#32;i++)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp.res[tmp.size++]&#32;=&#32;res[i];
<anchor xml:id="__player_stats_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;}
<anchor xml:id="__player_stats_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;rhs.size;&#32;i++)&#32;{
<anchor xml:id="__player_stats_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tmp.res[tmp.size++]&#32;=&#32;rhs.res[i];
<anchor xml:id="__player_stats_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;}
<anchor xml:id="__player_stats_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;
<anchor xml:id="__player_stats_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tmp;
<anchor xml:id="__player_stats_8cpp_source_1l00121"/>00121 }
</programlisting></section>
